{"ast":null,"code":"// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedFilteredAttack: \"\",\n//     selectedFilteredByOrder: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n// };\n\n// export default rootReducer\n\n// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedAttack: \"\",\n//     selectedOrder: \"\",\n//     selectedOrigin: \"\"\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case SELECT_ORDER:\n//       return {\n//         ...state,\n//         selectedOrder: action.payload,\n//       };\n\n//     case SELECT_TYPE:\n//       return {\n//         ...state,\n//         selectedType: action.payload,\n//       };\n\n//     case SELECT_ORIGIN:\n//       return {\n//         ...state,\n//         selectedOrigin: action.payload,\n//       };\n\n//     case SELECT_ATTACK:\n//       return {\n//         ...state,\n//         selectedAttack: action.payload,\n//       };\n//     case GET_POST_BY_ATTACK:\n//     case GET_POST_BY_ORDER:\n//     case GET_POST_BY_ORIGIN:\n//     case GET_POST_BY_TYPE:\n//       let filteredPokemons = state.pokemonsCopy;\n\n//       if (state.selectedAttack) {\n//         filteredPokemons = filteredPokemons.filter(\n//           (pokemon) => pokemon.attack === state.selectedAttack\n//         );\n//       }\n\n//       if (state.selectedType) {\n//           filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.type === state.selectedType\n//         );\n//       }\n\n//       if (state.selectedOrder) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.order === state.selectedOrder\n//         );\n//       }\n//       if (state.selectedOrigin) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.origin === state.selectedOrigin\n//         );\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedOrder: \"\",\n//         selectedAttack: \"\",\n//         selectedType: \"\",\n//         selectedOrigin: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n//             };\n\n// export default rootReducer;\n\n// let breedsFromApiOrDbOrAll = [];\n// // Si la acción es 'all', selecciona todas las razas\n// if (action.payload === \"All\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons;\n//   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n// } else if (action.payload === \"created\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => e.id.length > 5\n//   );\n//   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n// } else if (action.payload === \"api\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => typeof e.id === \"number\"\n//   );\n// }\n// return {\n//   ...state,\n//   allPokemons: breedsFromApiOrDbOrAll,\n// };","map":{"version":3,"names":[],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedFilteredAttack: \"\",\n//     selectedFilteredByOrder: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n// };\n                \n// export default rootReducer\n\n// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedAttack: \"\",\n//     selectedOrder: \"\",\n//     selectedOrigin: \"\"\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case SELECT_ORDER:\n//       return {\n//         ...state,\n//         selectedOrder: action.payload,\n//       };\n\n//     case SELECT_TYPE:\n//       return {\n//         ...state,\n//         selectedType: action.payload,\n//       };\n\n//     case SELECT_ORIGIN:\n//       return {\n//         ...state,\n//         selectedOrigin: action.payload,\n//       };\n\n//     case SELECT_ATTACK:\n//       return {\n//         ...state,\n//         selectedAttack: action.payload,\n//       };\n//     case GET_POST_BY_ATTACK:\n//     case GET_POST_BY_ORDER:\n//     case GET_POST_BY_ORIGIN:\n//     case GET_POST_BY_TYPE:\n//       let filteredPokemons = state.pokemonsCopy;\n\n//       if (state.selectedAttack) {\n//         filteredPokemons = filteredPokemons.filter(\n//           (pokemon) => pokemon.attack === state.selectedAttack\n//         );\n//       }\n\n//       if (state.selectedType) {\n//           filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.type === state.selectedType\n//         );\n//       }\n\n//       if (state.selectedOrder) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.order === state.selectedOrder\n//         );\n//       }\n//       if (state.selectedOrigin) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.origin === state.selectedOrigin\n//         );\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedOrder: \"\",\n//         selectedAttack: \"\",\n//         selectedType: \"\",\n//         selectedOrigin: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n//             };\n            \n// export default rootReducer;\n\n\n\n            // let breedsFromApiOrDbOrAll = [];\n            // // Si la acción es 'all', selecciona todas las razas\n            // if (action.payload === \"All\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons;\n            //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n            // } else if (action.payload === \"created\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => e.id.length > 5\n            //   );\n            //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n            // } else if (action.payload === \"api\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => typeof e.id === \"number\"\n            //   );\n            // }\n            // return {\n            //   ...state,\n            //   allPokemons: breedsFromApiOrDbOrAll,\n            // };"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}