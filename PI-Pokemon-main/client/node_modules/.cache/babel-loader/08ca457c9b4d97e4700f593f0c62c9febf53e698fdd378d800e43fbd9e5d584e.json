{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: [],\n  selectedType: \"\",\n  selectedFilteredAttack: \"\",\n  selectedFilteredByOrder: \"\"\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.pokemonsCopy;\n      } else {\n        filterType = state.pokemonsCopy.filter(event => event.types.includes(action.payload));\n      }\n      return {\n        ...state,\n        allPokemons: filterType\n      };\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.pokemonsCopy.filter(event => event.createdInDb) : state.pokemonsCopy.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter\n      };\n\n    // let breedsFromApiOrDbOrAll = [];\n    // // Si la acción es 'all', selecciona todas las razas\n    // if (action.payload === \"All\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons;\n    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n    // } else if (action.payload === \"created\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => e.id.length > 5\n    //   );\n    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n    // } else if (action.payload === \"api\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => typeof e.id === \"number\"\n    //   );\n    // }\n    // return {\n    //   ...state,\n    //   allPokemons: breedsFromApiOrDbOrAll,\n    // };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n        };\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedFilteredByOrder: \"\",\n        selectedFilteredAttack: \"\",\n        selectedType: \"\"\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;\n\n// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedAttack: \"\",\n//     selectedOrder: \"\",\n//     selectedOrigin: \"\"\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case SELECT_ORDER:\n//       return {\n//         ...state,\n//         selectedOrder: action.payload,\n//       };\n\n//     case SELECT_TYPE:\n//       return {\n//         ...state,\n//         selectedType: action.payload,\n//       };\n\n//     case SELECT_ORIGIN:\n//       return {\n//         ...state,\n//         selectedOrigin: action.payload,\n//       };\n\n//     case SELECT_ATTACK:\n//       return {\n//         ...state,\n//         selectedAttack: action.payload,\n//       };\n//     case GET_POST_BY_ATTACK:\n//     case GET_POST_BY_ORDER:\n//     case GET_POST_BY_ORIGIN:\n//     case GET_POST_BY_TYPE:\n//       let filteredPokemons = state.pokemonsCopy;\n\n//       if (state.selectedAttack) {\n//         filteredPokemons = filteredPokemons.filter(\n//           (pokemon) => pokemon.attack === state.selectedAttack\n//         );\n//       }\n\n//       if (state.selectedType) {\n//           filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.type === state.selectedType\n//         );\n//       }\n\n//       if (state.selectedOrder) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.order === state.selectedOrder\n//         );\n//       }\n//       if (state.selectedOrigin) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.origin === state.selectedOrigin\n//         );\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedOrder: \"\",\n//         selectedAttack: \"\",\n//         selectedType: \"\",\n//         selectedOrigin: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n//             };\n\n// export default rootReducer;\n\n// let breedsFromApiOrDbOrAll = [];\n// // Si la acción es 'all', selecciona todas las razas\n// if (action.payload === \"All\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons;\n//   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n// } else if (action.payload === \"created\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => e.id.length > 5\n//   );\n//   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n// } else if (action.payload === \"api\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => typeof e.id === \"number\"\n//   );\n// }\n// return {\n//   ...state,\n//   allPokemons: breedsFromApiOrDbOrAll,\n// };","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","RESET_FILTERS","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","selectedType","selectedFilteredAttack","selectedFilteredByOrder","rootReducer","state","action","type","payload","sortedPokemons","slice","sort","a","b","name","localeCompare","filterType","filter","event","types","includes","createdFilter","createdInDb","copy","attack","map","poke"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: [],\n    selectedType: \"\",\n    selectedFilteredAttack: \"\",\n    selectedFilteredByOrder: \"\",\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload,\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n\n      return {\n        ...state,\n        allPokemons: sortedPokemons,\n      };\n\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.pokemonsCopy;\n      } else {\n        filterType = state.pokemonsCopy.filter((event) =>\n          event.types.includes(action.payload)\n        );\n      }\n      return {\n        ...state,\n        allPokemons: filterType,\n      };\n\n    case FILTER_BY_ORIGIN:\n      const createdFilter =\n        action.payload === \"created\"\n          ? state.pokemonsCopy.filter((event) => event.createdInDb)\n          : state.pokemonsCopy.filter((event) => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons:\n          action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n      };\n\n    // let breedsFromApiOrDbOrAll = [];\n    // // Si la acción es 'all', selecciona todas las razas\n    // if (action.payload === \"All\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons;\n    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n    // } else if (action.payload === \"created\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => e.id.length > 5\n    //   );\n    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n    // } else if (action.payload === \"api\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => typeof e.id === \"number\"\n    //   );\n    // }\n    // return {\n    //   ...state,\n    //   allPokemons: breedsFromApiOrDbOrAll,\n    // };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy\n            .sort((a, b) => b.attack - a.attack)\n            .map((poke) => poke),\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy\n            .sort((a, b) => a.attack - b.attack)\n            .map((poke) => poke),\n        };\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedFilteredByOrder: \"\",\n        selectedFilteredAttack: \"\",\n        selectedType: \"\",\n      };\n    default:\n      return { ...state };\n  }\n};\n                \nexport default rootReducer\n\n// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedAttack: \"\",\n//     selectedOrder: \"\",\n//     selectedOrigin: \"\"\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case SELECT_ORDER:\n//       return {\n//         ...state,\n//         selectedOrder: action.payload,\n//       };\n\n//     case SELECT_TYPE:\n//       return {\n//         ...state,\n//         selectedType: action.payload,\n//       };\n\n//     case SELECT_ORIGIN:\n//       return {\n//         ...state,\n//         selectedOrigin: action.payload,\n//       };\n\n//     case SELECT_ATTACK:\n//       return {\n//         ...state,\n//         selectedAttack: action.payload,\n//       };\n//     case GET_POST_BY_ATTACK:\n//     case GET_POST_BY_ORDER:\n//     case GET_POST_BY_ORIGIN:\n//     case GET_POST_BY_TYPE:\n//       let filteredPokemons = state.pokemonsCopy;\n\n//       if (state.selectedAttack) {\n//         filteredPokemons = filteredPokemons.filter(\n//           (pokemon) => pokemon.attack === state.selectedAttack\n//         );\n//       }\n\n//       if (state.selectedType) {\n//           filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.type === state.selectedType\n//         );\n//       }\n\n//       if (state.selectedOrder) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.order === state.selectedOrder\n//         );\n//       }\n//       if (state.selectedOrigin) {\n//         filteredPokemons = filteredPokemons.filter((pokemon) =>\n//           pokemon.origin === state.selectedOrigin\n//         );\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedOrder: \"\",\n//         selectedAttack: \"\",\n//         selectedType: \"\",\n//         selectedOrigin: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n//             };\n            \n// export default rootReducer;\n\n\n\n            // let breedsFromApiOrDbOrAll = [];\n            // // Si la acción es 'all', selecciona todas las razas\n            // if (action.payload === \"All\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons;\n            //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n            // } else if (action.payload === \"created\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => e.id.length > 5\n            //   );\n            //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n            // } else if (action.payload === \"api\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => typeof e.id === \"number\"\n            //   );\n            // }\n            // return {\n            //   ...state,\n            //   allPokemons: breedsFromApiOrDbOrAll,\n            // };"],"mappings":"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L,GAAGU,KAAK;QACRF,uBAAuB,EAAE,EAAE;QAC3BD,sBAAsB,EAAE,EAAE;QAC1BD,YAAY,EAAE;MAChB,CAAC;IACH;MACE,OAAO;QAAE,GAAGI;MAAM,CAAC;EACvB;AACF,CAAC;AAED,eAAeD,WAAW;;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}