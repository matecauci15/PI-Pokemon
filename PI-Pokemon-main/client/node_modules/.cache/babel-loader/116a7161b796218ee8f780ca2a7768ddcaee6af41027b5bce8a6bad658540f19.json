{"ast":null,"code":"// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedFilteredAttack: \"\",\n//     selectedFilteredByOrder: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n// };\n\n// export default rootReducer\n\nimport { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: [],\n  selectedType: \"\",\n  selectedAttack: \"\",\n  selectedOrder: \"\",\n  selectedOrigin: \"\"\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case SELECT_ORDER:\n      return {\n        ...state,\n        selectedOrder: action.payload\n      };\n    case SELECT_TYPE:\n      return {\n        ...state,\n        selectedType: action.payload\n      };\n    case SELECT_ORIGIN:\n      return {\n        ...state,\n        selectedOrigin: action.payload\n      };\n    case SELECT_ATTACK:\n      return {\n        ...state,\n        selectedAttack: action.payload\n      };\n    case GET_POST_BY_ATTACK:\n    case GET_POST_BY_ORDER:\n    case GET_POST_BY_ORIGIN:\n    case GET_POST_BY_TYPE:\n      let filteredPosts = state.pokemonsCopy;\n      if (state.selectedCategory) {\n        filteredPosts = filteredPosts.filter(post => post.category === state.selectedCategory);\n      }\n      if (state.selectedProvince) {\n        filteredPosts = filteredPosts.filter(post => post.ubication.includes(state.selectedProvince));\n      }\n      if (state.selectedLocality) {\n        filteredPosts = filteredPosts.filter(post => post.ubication.includes(state.selectedLocality));\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedOrder: \"\",\n        selectedAttack: \"\",\n        selectedType: \"\",\n        selectedOrigin: \"\"\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;\n\n// let breedsFromApiOrDbOrAll = [];\n// // Si la acción es 'all', selecciona todas las razas\n// if (action.payload === \"All\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons;\n//   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n// } else if (action.payload === \"created\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => e.id.length > 5\n//   );\n//   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n// } else if (action.payload === \"api\") {\n//   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     (e) => typeof e.id === \"number\"\n//   );\n// }\n// return {\n//   ...state,\n//   allPokemons: breedsFromApiOrDbOrAll,\n// };","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","RESET_FILTERS","GET_POST_BY_ATTACK","GET_POST_BY_ORDER","GET_POST_BY_ORIGIN","GET_POST_BY_TYPE","SELECT_ORDER","SELECT_ORIGIN","SELECT_TYPE","SELECT_ATTACK","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","selectedType","selectedAttack","selectedOrder","selectedOrigin","rootReducer","state","action","type","payload","filteredPosts","selectedCategory","filter","post","category","selectedProvince","ubication","includes","selectedLocality"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedFilteredAttack: \"\",\n//     selectedFilteredByOrder: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n//     default:\n//       return { ...state };\n//   }\n// };\n                \n// export default rootReducer\n\nimport { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, RESET_FILTERS, GET_POST_BY_ATTACK, GET_POST_BY_ORDER, GET_POST_BY_ORIGIN, GET_POST_BY_TYPE, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE, SELECT_ATTACK } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: [],\n    selectedType: \"\",\n    selectedAttack: \"\",\n    selectedOrder: \"\",\n    selectedOrigin: \"\"\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload,\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n\n    case SELECT_ORDER:\n      return {\n        ...state,\n        selectedOrder: action.payload,\n      };\n\n    case SELECT_TYPE:\n      return {\n        ...state,\n        selectedType: action.payload,\n      };\n\n    case SELECT_ORIGIN:\n      return {\n        ...state,\n        selectedOrigin: action.payload,\n      };\n\n    case SELECT_ATTACK:\n      return {\n        ...state,\n        selectedAttack: action.payload,\n      };\n    case GET_POST_BY_ATTACK:\n    case GET_POST_BY_ORDER:\n    case GET_POST_BY_ORIGIN:\n    case GET_POST_BY_TYPE:\n      let filteredPosts = state.pokemonsCopy;\n\n      if (state.selectedCategory) {\n        filteredPosts = filteredPosts.filter(\n          (post) => post.category === state.selectedCategory\n        );\n      }\n\n      if (state.selectedProvince) {\n        filteredPosts = filteredPosts.filter((post) =>\n          post.ubication.includes(state.selectedProvince)\n        );\n      }\n\n      if (state.selectedLocality) {\n        filteredPosts = filteredPosts.filter((post) =>\n          post.ubication.includes(state.selectedLocality)\n        );\n      }\n\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedOrder: \"\",\n        selectedAttack: \"\",\n        selectedType: \"\",\n        selectedOrigin: \"\",\n      };\n    default:\n      return { ...state };\n  }\n            };\n            \nexport default rootReducer;\n\n\n\n            // let breedsFromApiOrDbOrAll = [];\n            // // Si la acción es 'all', selecciona todas las razas\n            // if (action.payload === \"All\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons;\n            //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n            // } else if (action.payload === \"created\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => e.id.length > 5\n            //   );\n            //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n            // } else if (action.payload === \"api\") {\n            //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n            //     (e) => typeof e.id === \"number\"\n            //   );\n            // }\n            // return {\n            //   ...state,\n            //   allPokemons: breedsFromApiOrDbOrAll,\n            // };"],"mappingsgBAAgB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,aAAa,EAAEC,WAAW,EAAEC,aAAa,QAAQ,gBAAgB;AAE/N,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,EAAE;EACZC,gBAAgB,EAAE,EAAE;EACpBC,YAAY,EAAE,EAAE;EAChBC,cAAc,EAAE,EAAE;EAClBC,aAAa,EAAE,EAAE;EACjBC,cAAc,EAAE;AACpB,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGV,YAAY,EAAEW,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKxB,YAAY;MACf,OAAO;QACL,GAAGsB,KAAK;QACRT,WAAW,EAAEU,MAAM,CAACE,OAAO;QAC3BX,YAAY,EAAES,MAAM,CAACE;MACvB,CAAC;IACH,KAAKvB,SAAS;MACZ,OAAO;QACL,GAAGoB,KAAK;QACRP,QAAQ,EAAEQ,MAAM,CAACE;MACnB,CAAC;IACH,KAAKxB,gBAAgB;MACnB,OAAO;QACL,GAAGqB,KAAK;QACRT,WAAW,EAAEU,MAAM,CAACE,OAAO;QAC3BX,YAAY,EAAES,MAAM,CAACE;MACvB,CAAC;IAEH,KAAKjB,YAAY;MACf,OAAO;QACL,GAAGc,KAAK;QACRH,aAAa,EAAEI,MAAM,CAACE;MACxB,CAAC;IAEH,KAAKf,WAAW;MACd,OAAO;QACL,GAAGY,KAAK;QACRL,YAAY,EAAEM,MAAM,CAACE;MACvB,CAAC;IAEH,KAAKhB,aAAa;MAChB,OAAO;QACL,GAAGa,KAAK;QACRF,cAAc,EAAEG,MAAM,CAACE;MACzB,CAAC;IAEH,KAAKd,aAAa;MAChB,OAAO;QACL,GAAGW,KAAK;QACRJ,cAAc,EAAEK,MAAM,CAACE;MACzB,CAAC;IACH,KAAKrB,kBAAkB;IACvB,KAAKC,iBAAiB;IACtB,KAAKC,kBAAkB;IACvB,KAAKC,gBAAgB;MACnB,IAAImB,aAAa,GAAGJ,KAAK,CAACR,YAAY;MAEtC,IAAIQ,KAAK,CAACK,gBAAgB,EAAE;QAC1BD,aAAa,GAAGA,aAAa,CAACE,MAAM,CACjCC,IAAI,IAAKA,IAAI,CAACC,QAAQ,KAAKR,KAAK,CAACK,gBACpC,CAAC;MACH;MAEA,IAAIL,KAAK,CAACS,gBAAgB,EAAE;QAC1BL,aAAa,GAAGA,aAAa,CAACE,MAAM,CAAEC,IAAI,IACxCA,IAAI,CAACG,SAAS,CAACC,QAAQ,CAACX,KAAK,CAACS,gBAAgB,CAChD,CAAC;MACH;MAEA,IAAIT,KAAK,CAACY,gBAAgB,EAAE;QAC1BR,aAAa,GAAGA,aAAa,CAACE,MAAM,CAAEC,IAAI,IACxCA,IAAI,CAACG,SAAS,CAACC,QAAQ,CAACX,KAAK,CAACY,gBAAgB,CAChD,CAAC;MACH;IAEF,KAAK/B,aAAa;MAChB,OAAO;QACL,GAAGmB,KAAK;QACRH,aAAa,EAAE,EAAE;QACjBD,cAAc,EAAE,EAAE;QAClBD,YAAY,EAAE,EAAE;QAChBG,cAAc,EAAE;MAClB,CAAC;IACH;MACE,OAAO;QAAE,GAAGE;MAAM,CAAC;EACvB;AACU,CAAC;AAEb,eAAeD,WAAW;;AAId;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}