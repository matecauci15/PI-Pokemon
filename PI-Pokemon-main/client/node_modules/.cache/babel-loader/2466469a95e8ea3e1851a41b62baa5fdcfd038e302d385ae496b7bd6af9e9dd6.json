{"ast":null,"code":"// import NavBar from '../../Components/NavBar/NavBar';\n// import React, {useEffect, useState } from 'react';\n// import styles from './HomePage.module.css';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { filterByAttack, filterByOrigin, filterByType, getPokemon, getPokemonByName, getTypes, orderByName } from '../../Redux/actions';\n// import Cards from '../../Components/Cards/Cards';\n// // import getColorForType from '../../utils/colors'\n// // import Footer from '../Footer/Footer';\n\n// const HomePage = () => {\n//   const dispatch = useDispatch()\n//   // global state = component subscribed to global state\n//   const allPokemons = useSelector(state => state.allPokemons)\n//   // const pokemonsCopy = useSelector((state) => state.pokemonsCopy); //  copia lista de pokemon ordenada\n\n//   const allTypes = useSelector(state => state.allTypes)\n\n//   const [searchPokemon, setSearchPokemon] = useState(\"\")\n\n//   useEffect(() => {\n//     // when page render will send the action and modify the state\n//     dispatch(getTypes());\n//     dispatch(getPokemon())\n//   },[dispatch])\n\n//   function handleClick (event){\n//     event.preventDefault()\n//     dispatch(getPokemon())\n//   }\n\n//   function handleChange(event) {\n//     event.preventDefault()\n//     setSearchPokemon(event.target.value)\n//   }\n\n//   function handleSubmit(event){\n//     event.preventDefault();\n//     if (searchPokemon) {\n//       dispatch(getPokemonByName(searchPokemon));\n//     } else {\n//       dispatch(getPokemon());\n//     }\n//   }\n//   function handleClearSearch() {\n//     setSearchPokemon(\"\"); // establece el valor de busqueda en una cadena vacia\n//     dispatch(getPokemon(allPokemons)); // muestra todos los pokemon\n//   }\n\n//   // funcion para manejar el cambio de ORDEN A-Z Z-A\n//   const handleOrderChange = (event) => {\n//     event.preventDefault();\n//     const {value} = event.target; // 'AA' para ascendente, 'ZA' para descendente\n//     dispatch(orderByName(value)); // llama a la accion para ordenar los pokemons\n//   };\n\n//   // filtrado por Origen\n//   const handleOriginFilter = (event)=>{\n//     event.preventDefault()\n//     const {value} = event.target;\n//     dispatch(filterByOrigin(value))\n// }\n\n//   // Filtrado por TYPE\n//   const handleTypeChange = (event) => {\n//     event.preventDefault()\n//     const {value} = event.target;\n//     dispatch(filterByType(value)); // llama a la accion para filtrar los pokemon por tipo\n//   };\n\n//   //Filtrado por Ataque\n//   const handlerFilterAtack = (event) => {\n//     event.preventDefault()\n//     const { value } = event.target;\n//     if (value === \"All\") {\n//       dispatch(getPokemon());\n//     } else {\n//       dispatch(filterByAttack(value));\n//     }\n//   }\n\n//   const handleClearFilters = (event) => {\n//     if(event.target.value === \"All\"){\n//       dispatch(getPokemon())\n//     }\n//   }\n//   // Paginado\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pokemonsPerPage] = useState(12);\n\n//   const indexOfLastPokemon = currentPage * pokemonsPerPage;\n//   const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage;\n//   const currentPokemons = allPokemons.slice(indexOfFirstPokemon, indexOfLastPokemon);\n\n//   useEffect(()=>{\n//     if(currentPokemons.length === 0) setCurrentPage(1);\n//   },[currentPokemons])\n\n//   const nextHandler = () => {\n//     // verificamos si estamos en la última pagina, para no avanzar mas\n//     if (indexOfFirstPokemon + pokemonsPerPage >= allPokemons.length) {\n//       return;\n//     }\n//     if (indexOfFirstPokemon >= allPokemons.length) return; // validacion para detenerse\n//     setCurrentPage(currentPage + 1);\n//   }\n\n//   const prevHandler = () => {\n//     if (currentPage === 0) return;\n//     setCurrentPage(currentPage - 1);\n//   }\n\n//   return (\n//     <>\n//       <div>\n//       <NavBar handleChange={handleChange} handleClick={handleClick} handleSubmit={handleSubmit} handleClearSearch={handleClearSearch}/>\n//       </div>\n\n//       <div className={styles.filters}>\n//       <div>\n//       <select className={styles.filter_types} onChange={handleOrderChange} name='order'  handleClearFilters={handleClearFilters}>\n//       <option value=\"All\">Order</option>\n//         <option value=\"AA\">A-Z</option>\n//         <option value=\"ZA\">Z-A</option>\n//       </select>\n//     </div>\n//     <div>\n//       <select className={styles.filter_types} onChange={handleTypeChange} name='types'  handleClearFilters={handleClearFilters} >\n//         <option  value=\"All\">Types</option>\n//         {allTypes?.map(tipo => <option key={tipo} value={tipo}>{tipo}</option>)}   \n//       </select>\n//     </div>\n//     <div >\n//           <select className={styles.filter_types} name=\"origen\"  handleClearFilters={handleClearFilters} onChange={(event) => handleOriginFilter(event)}>\n//               <option value=\"All\">Created</option>\n//               <option value=\"created\">DB</option>\n//               <option value=\"api\">API</option>\n//           </select>\n//     </div>\n//     <div>\n//       <select className={styles.filter_types} name='attack' onChange={handlerFilterAtack} handleClearFilters={handleClearFilters}>\n//         <option value=\"All\">Attack</option>\n//         <option value=\"ascending\">Ascending (A-Z)</option>\n//         <option value=\"descending\">Descending (Z-A)</option>\n//       </select>\n//     </div>\n//       </div>\n\n//     <div className={styles.home_cards}> \n//         <Cards allPokemons={currentPokemons} />\n//     </div>\n//     <div className={styles.pagination_container}>\n//       <button className={styles.pagination_button} onClick={prevHandler}  disabled={currentPage === 1}>Prev</button>\n//       <button className={styles.pagination_button} >{currentPage}</button>\n//       <button className={styles.pagination_button} onClick={nextHandler} disabled={indexOfFirstPokemon + pokemonsPerPage >= allPokemons.length}>Next</button>\n//     </div>\n//     </>\n//   );\n// };\n\n// export default HomePage;","map":{"version":3,"names":[],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/views/HomePage/homePage.jsx"],"sourcesContent":["// import NavBar from '../../Components/NavBar/NavBar';\n// import React, {useEffect, useState } from 'react';\n// import styles from './HomePage.module.css';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { filterByAttack, filterByOrigin, filterByType, getPokemon, getPokemonByName, getTypes, orderByName } from '../../Redux/actions';\n// import Cards from '../../Components/Cards/Cards';\n// // import getColorForType from '../../utils/colors'\n// // import Footer from '../Footer/Footer';\n\n// const HomePage = () => {\n//   const dispatch = useDispatch()\n//   // global state = component subscribed to global state\n//   const allPokemons = useSelector(state => state.allPokemons)\n//   // const pokemonsCopy = useSelector((state) => state.pokemonsCopy); //  copia lista de pokemon ordenada\n  \n//   const allTypes = useSelector(state => state.allTypes)\n  \n//   const [searchPokemon, setSearchPokemon] = useState(\"\")\n  \n//   useEffect(() => {\n//     // when page render will send the action and modify the state\n//     dispatch(getTypes());\n//     dispatch(getPokemon())\n//   },[dispatch])\n  \n//   function handleClick (event){\n//     event.preventDefault()\n//     dispatch(getPokemon())\n//   }\n\n//   function handleChange(event) {\n//     event.preventDefault()\n//     setSearchPokemon(event.target.value)\n//   }\n\n//   function handleSubmit(event){\n//     event.preventDefault();\n//     if (searchPokemon) {\n//       dispatch(getPokemonByName(searchPokemon));\n//     } else {\n//       dispatch(getPokemon());\n//     }\n//   }\n//   function handleClearSearch() {\n//     setSearchPokemon(\"\"); // establece el valor de busqueda en una cadena vacia\n//     dispatch(getPokemon(allPokemons)); // muestra todos los pokemon\n//   }\n\n  \n//   // funcion para manejar el cambio de ORDEN A-Z Z-A\n//   const handleOrderChange = (event) => {\n//     event.preventDefault();\n//     const {value} = event.target; // 'AA' para ascendente, 'ZA' para descendente\n//     dispatch(orderByName(value)); // llama a la accion para ordenar los pokemons\n//   };\n  \n//   // filtrado por Origen\n//   const handleOriginFilter = (event)=>{\n//     event.preventDefault()\n//     const {value} = event.target;\n//     dispatch(filterByOrigin(value))\n// }\n  \n//   // Filtrado por TYPE\n//   const handleTypeChange = (event) => {\n//     event.preventDefault()\n//     const {value} = event.target;\n//     dispatch(filterByType(value)); // llama a la accion para filtrar los pokemon por tipo\n//   };\n  \n  \n//   //Filtrado por Ataque\n//   const handlerFilterAtack = (event) => {\n//     event.preventDefault()\n//     const { value } = event.target;\n//     if (value === \"All\") {\n//       dispatch(getPokemon());\n//     } else {\n//       dispatch(filterByAttack(value));\n//     }\n//   }\n  \n//   const handleClearFilters = (event) => {\n//     if(event.target.value === \"All\"){\n//       dispatch(getPokemon())\n//     }\n//   }\n//   // Paginado\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pokemonsPerPage] = useState(12);\n\n//   const indexOfLastPokemon = currentPage * pokemonsPerPage;\n//   const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage;\n//   const currentPokemons = allPokemons.slice(indexOfFirstPokemon, indexOfLastPokemon);\n\n//   useEffect(()=>{\n//     if(currentPokemons.length === 0) setCurrentPage(1);\n//   },[currentPokemons])\n\n\n//   const nextHandler = () => {\n//     // verificamos si estamos en la última pagina, para no avanzar mas\n//     if (indexOfFirstPokemon + pokemonsPerPage >= allPokemons.length) {\n//       return;\n//     }\n//     if (indexOfFirstPokemon >= allPokemons.length) return; // validacion para detenerse\n//     setCurrentPage(currentPage + 1);\n//   }\n\n//   const prevHandler = () => {\n//     if (currentPage === 0) return;\n//     setCurrentPage(currentPage - 1);\n//   }\n\n//   return (\n//     <>\n//       <div>\n//       <NavBar handleChange={handleChange} handleClick={handleClick} handleSubmit={handleSubmit} handleClearSearch={handleClearSearch}/>\n//       </div>\n\n//       <div className={styles.filters}>\n//       <div>\n//       <select className={styles.filter_types} onChange={handleOrderChange} name='order'  handleClearFilters={handleClearFilters}>\n//       <option value=\"All\">Order</option>\n//         <option value=\"AA\">A-Z</option>\n//         <option value=\"ZA\">Z-A</option>\n//       </select>\n//     </div>\n//     <div>\n//       <select className={styles.filter_types} onChange={handleTypeChange} name='types'  handleClearFilters={handleClearFilters} >\n//         <option  value=\"All\">Types</option>\n//         {allTypes?.map(tipo => <option key={tipo} value={tipo}>{tipo}</option>)}   \n//       </select>\n//     </div>\n//     <div >\n//           <select className={styles.filter_types} name=\"origen\"  handleClearFilters={handleClearFilters} onChange={(event) => handleOriginFilter(event)}>\n//               <option value=\"All\">Created</option>\n//               <option value=\"created\">DB</option>\n//               <option value=\"api\">API</option>\n//           </select>\n//     </div>\n//     <div>\n//       <select className={styles.filter_types} name='attack' onChange={handlerFilterAtack} handleClearFilters={handleClearFilters}>\n//         <option value=\"All\">Attack</option>\n//         <option value=\"ascending\">Ascending (A-Z)</option>\n//         <option value=\"descending\">Descending (Z-A)</option>\n//       </select>\n//     </div>\n//       </div>\n\n//     <div className={styles.home_cards}> \n//         <Cards allPokemons={currentPokemons} />\n//     </div>\n//     <div className={styles.pagination_container}>\n//       <button className={styles.pagination_button} onClick={prevHandler}  disabled={currentPage === 1}>Prev</button>\n//       <button className={styles.pagination_button} >{currentPage}</button>\n//       <button className={styles.pagination_button} onClick={nextHandler} disabled={indexOfFirstPokemon + pokemonsPerPage >= allPokemons.length}>Next</button>\n//     </div>\n//     </>\n//   );\n// };\n\n// export default HomePage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}