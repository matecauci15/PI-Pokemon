{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: []\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        // devolvemos la copia para no pisar el estado\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        // devolvemos la copia para no pisar el estado\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === 'AA') {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === 'ZA') {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    case FILTER_BY_TYPE:\n      let breedsFromApiOrDbOrAll = [];\n      // Si la acción es 'all', selecciona todas las razas\n      if (action.payload === \"all\") {\n        breedsFromApiOrDbOrAll = state.allPokemons;\n        // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n      } else if (action.payload === \"db\") {\n        breedsFromApiOrDbOrAll = state.allPokemons.filter(e => e.id.length > 10);\n        // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n      } else if (action.payload === \"api\") {\n        breedsFromApiOrDbOrAll = state.allPokemons.filter(e => typeof e.id === \"number\");\n      }\n      return {\n        ...state,\n        filteredPokemon: breedsFromApiOrDbOrAll\n      };\n    //     let filterType;\n    //     if (action.payload === \"All\") {\n    //         filterType = state.pokemonsCopy;\n    //     } else {\n    //         filterType = state.pokemonsCopy.filter((event) =>\n    //         event.types.includes(action.payload)\n    //         );\n    //     }\n    // return {\n    //     ...state,\n    //     allPokemons: filterType,\n    // }; \n\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.pokemonsCopy.filter(event => event.createdInDb) : state.pokemonsCopy.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter\n      };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === 'descending') {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n        };\n      }\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","rootReducer","state","action","type","payload","sortedPokemons","slice","sort","a","b","name","localeCompare","breedsFromApiOrDbOrAll","filter","e","id","length","filteredPokemon","createdFilter","event","createdInDb","copy","attack","map","poke"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: []\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_POKEMONS:\n            return {\n                // devolvemos la copia para no pisar el estado\n                ...state,\n                allPokemons: action.payload,\n                pokemonsCopy: action.payload\n            }\n            case GET_TYPES:\n                return {\n                    ...state,\n                    allTypes: action.payload\n            }\n            case GET_POKEMON_NAME:\n                return {\n                    // devolvemos la copia para no pisar el estado\n                    ...state,\n                    allPokemons: action.payload,\n                    pokemonsCopy: action.payload\n                }\n                    \n            case ORDER_BY_NAME:\n                const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n                    if (action.payload === 'AA') {\n                    return a.name.localeCompare(b.name);\n                    } else if (action.payload === 'ZA') {\n                    return b.name.localeCompare(a.name);\n                    }\n                    return 0;\n                });\n                  \n                return {\n                    ...state,\n                    allPokemons: sortedPokemons,\n                };\n                    \n            case FILTER_BY_TYPE:\n                let breedsFromApiOrDbOrAll = [];\n                // Si la acción es 'all', selecciona todas las razas\n                if (action.payload === \"all\") {\n                  breedsFromApiOrDbOrAll = state.allPokemons;\n                  // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n                } else if (action.payload === \"db\") {\n                  breedsFromApiOrDbOrAll = state.allPokemons.filter(\n                    (e) => e.id.length > 10\n                  );\n                  // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n                } else if (action.payload === \"api\") {\n                  breedsFromApiOrDbOrAll = state.allPokemons.filter(\n                    (e) => typeof e.id === \"number\"\n                  );\n                }\n                return {\n                  ...state,\n                  filteredPokemon: breedsFromApiOrDbOrAll,\n                };\n            //     let filterType;\n            //     if (action.payload === \"All\") {\n            //         filterType = state.pokemonsCopy;\n            //     } else {\n            //         filterType = state.pokemonsCopy.filter((event) =>\n            //         event.types.includes(action.payload)\n            //         );\n            //     }\n            // return {\n            //     ...state,\n            //     allPokemons: filterType,\n            // }; \n\n            case FILTER_BY_ORIGIN:\n                    const createdFilter = action.payload === \"created\"\n                    ? state.pokemonsCopy.filter((event) => event.createdInDb)\n                    : state.pokemonsCopy.filter((event) => !event.createdInDb);\n            return {\n                ...state,\n                allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n            }\n            case FILTER_BY_ATTACK:\n                let copy = state.allPokemons;\n                if (action.payload === 'descending') {\n                    return {\n                        ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n                    }\n                } else {\n                    return {\n                        ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n                    }\n                }\n                default:\n                    return {...state}\n            }\n    }\n                \nexport default rootReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}