{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  alltypes: []\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        // return copy state so we dont \"pisar\" the state\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        alltypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        // return copy state so we dont \"pisar\" the state\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case ORDER_BY_NAME:\n      let copy1 = state.allPokemons;\n      if (action.payload === 'AA') {\n        return {\n          ...state,\n          allPokemons: copy1.sort((a, b) => {\n            if (a.name < b.name) return -1;\n            if (a.name > b.name) return 1;\n            return 0;\n          }).map(p => p)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy1.sort((a, b) => {\n            if (a.name < b.name) return 1;\n            if (a.name > b.name) return -1;\n            return 0;\n          }).map(p => p)\n        };\n      }\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","initialState","allPokemons","pokemonsCopy","alltypes","rootReducer","state","action","type","payload","copy1","sort","a","b","name","map","p"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    alltypes: []\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_POKEMONS:\n            return {\n                // return copy state so we dont \"pisar\" the state\n                ...state,\n                allPokemons: action.payload,\n                pokemonsCopy: action.payload\n            }\n            case GET_TYPES:\n                return {\n                    ...state,\n                    alltypes: action.payload\n            }\n            case GET_POKEMON_NAME:\n                return {\n                    // return copy state so we dont \"pisar\" the state\n                    ...state,\n                    allPokemons: action.payload,\n                    pokemonsCopy: action.payload\n                }\n                    \n            case ORDER_BY_NAME:\n            let copy1 = state.allPokemons;\n            if (action.payload === 'AA') {\n                return {\n                    ...state, allPokemons: copy1.sort((a, b) => {\n                        if (a.name < b.name) return -1\n                        if (a.name > b.name) return 1\n                        return 0\n                    }).map(p => p)\n                }\n            } else {\n                return {\n                    ...state, allPokemons: copy1.sort((a, b) => {\n                        if (a.name < b.name) return 1\n                        if (a.name > b.name) return -1\n                        return 0\n                    }).map(p => p)\n                }\n            }\n                    default:\n                        return {...state}\n                    }\n                }\n                \n                export default rootReducer"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,gBAAgB;AAE3G,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;AACd,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EAClD,QAAOA,MAAM,CAACC,IAAI;IACd,KAAKZ,YAAY;MACb,OAAO;QACH;QACA,GAAGU,KAAK;QACRJ,WAAW,EAAEK,MAAM,CAACE,OAAO;QAC3BN,YAAY,EAAEI,MAAM,CAACE;MACzB,CAAC;IACD,KAAKX,SAAS;MACV,OAAO;QACH,GAAGQ,KAAK;QACRF,QAAQ,EAAEG,MAAM,CAACE;MACzB,CAAC;IACD,KAAKZ,gBAAgB;MACjB,OAAO;QACH;QACA,GAAGS,KAAK;QACRJ,WAAW,EAAEK,MAAM,CAACE,OAAO;QAC3BN,YAAY,EAAEI,MAAM,CAACE;MACzB,CAAC;IAEL,KAAKV,aAAa;MAClB,IAAIW,KAAK,GAAGJ,KAAK,CAACJ,WAAW;MAC7B,IAAIK,MAAM,CAACE,OAAO,KAAK,IAAI,EAAE;QACzB,OAAO;UACH,GAAGH,KAAK;UAAEJ,WAAW,EAAEQ,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;YACxC,IAAID,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC9B,IAAIF,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAO,CAAC;YAC7B,OAAO,CAAC;UACZ,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC;QACjB,CAAC;MACL,CAAC,MAAM;QACH,OAAO;UACH,GAAGV,KAAK;UAAEJ,WAAW,EAAEQ,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;YACxC,IAAID,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAO,CAAC;YAC7B,IAAIF,CAAC,CAACE,IAAI,GAAGD,CAAC,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC9B,OAAO,CAAC;UACZ,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC;QACjB,CAAC;MACL;IACQ;MACI,OAAO;QAAC,GAAGV;MAAK,CAAC;EACrB;AACJ,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}