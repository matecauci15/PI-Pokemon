{"ast":null,"code":"// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: []\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//     switch(action.type){\n//         case GET_POKEMONS:\n//             return {\n//                 // devolvemos la copia para no pisar el estado\n//                 ...state,\n//                 allPokemons: action.payload,\n//                 pokemonsCopy: action.payload\n//             }\n//             case GET_TYPES:\n//                 return {\n//                     ...state,\n//                     allTypes: action.payload\n//             }\n//             case GET_POKEMON_NAME:\n//                 return {\n//                     // devolvemos la copia para no pisar el estado\n//                     ...state,\n//                     allPokemons: action.payload,\n//                     pokemonsCopy: action.payload\n//                 }\n\n//             case ORDER_BY_NAME:\n//                 const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//                     if (action.payload === 'AA') {\n//                     return a.name.localeCompare(b.name);\n//                     } else if (action.payload === 'ZA') {\n//                     return b.name.localeCompare(a.name);\n//                     }\n//                     return 0;\n//                 });\n\n//                 return {\n//                     ...state,\n//                     allPokemons: sortedPokemons,\n//                 };\n\n//             case FILTER_BY_TYPE:\n//                 let filterType;\n//                 if (action.payload === \"All\") {\n//                     filterType = state.pokemonsCopy;\n//                 } else {\n//                     filterType = state.pokemonsCopy.filter((event) =>\n//                     event.types.includes(action.payload)\n//                     );\n//                 }\n//             return {\n//                 ...state,\n//                 allPokemons: filterType,\n//             }; \n\n//             case FILTER_BY_ORIGIN:\n//                     const createdFilter = action.payload === \"created\"\n//                     ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//                     : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//             return {\n//                 ...state,\n//                 allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//             }\n//             case FILTER_BY_ATTACK:\n//                 let copy = state.allPokemons;\n//                 if (action.payload === 'descending') {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n//                     }\n//                 } else {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n//                     }\n//                 }\n//                 default:\n//                     return {...state}\n//             }\n//     }\n\n// export default rootReducer\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.allPokemons.filter(event => event.createdInDb) : state.allPokemons.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: createdFilter\n      };\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.allPokemons;\n      } else {\n        filterType = state.allPokemons.filter(event => event.types.includes(action.payload));\n      }\n      return {\n        ...state,\n        allPokemons: filterType\n      };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack)\n        };\n      }\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.allPokemons.sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};","map":{"version":3,"names":["rootReducer","state","initialState","action","type","GET_POKEMONS","allPokemons","payload","pokemonsCopy","GET_TYPES","allTypes","GET_POKEMON_NAME","FILTER_BY_ORIGIN","createdFilter","filter","event","createdInDb","FILTER_BY_TYPE","filterType","types","includes","FILTER_BY_ATTACK","copy","sort","a","b","attack","ORDER_BY_NAME","sortedPokemons","name","localeCompare"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: []\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//     switch(action.type){\n//         case GET_POKEMONS:\n//             return {\n//                 // devolvemos la copia para no pisar el estado\n//                 ...state,\n//                 allPokemons: action.payload,\n//                 pokemonsCopy: action.payload\n//             }\n//             case GET_TYPES:\n//                 return {\n//                     ...state,\n//                     allTypes: action.payload\n//             }\n//             case GET_POKEMON_NAME:\n//                 return {\n//                     // devolvemos la copia para no pisar el estado\n//                     ...state,\n//                     allPokemons: action.payload,\n//                     pokemonsCopy: action.payload\n//                 }\n                    \n//             case ORDER_BY_NAME:\n//                 const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//                     if (action.payload === 'AA') {\n//                     return a.name.localeCompare(b.name);\n//                     } else if (action.payload === 'ZA') {\n//                     return b.name.localeCompare(a.name);\n//                     }\n//                     return 0;\n//                 });\n                  \n//                 return {\n//                     ...state,\n//                     allPokemons: sortedPokemons,\n//                 };\n                    \n//             case FILTER_BY_TYPE:\n//                 let filterType;\n//                 if (action.payload === \"All\") {\n//                     filterType = state.pokemonsCopy;\n//                 } else {\n//                     filterType = state.pokemonsCopy.filter((event) =>\n//                     event.types.includes(action.payload)\n//                     );\n//                 }\n//             return {\n//                 ...state,\n//                 allPokemons: filterType,\n//             }; \n\n//             case FILTER_BY_ORIGIN:\n//                     const createdFilter = action.payload === \"created\"\n//                     ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//                     : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//             return {\n//                 ...state,\n//                 allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//             }\n//             case FILTER_BY_ATTACK:\n//                 let copy = state.allPokemons;\n//                 if (action.payload === 'descending') {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n//                     }\n//                 } else {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n//                     }\n//                 }\n//                 default:\n//                     return {...state}\n//             }\n//     }\n                \n// export default rootReducer\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case GET_POKEMONS:\n        return {\n          ...state,\n          allPokemons: action.payload,\n          pokemonsCopy: action.payload,\n        };\n      case GET_TYPES:\n        return {\n          ...state,\n          allTypes: action.payload,\n        };\n      case GET_POKEMON_NAME:\n        return {\n          ...state,\n          allPokemons: action.payload,\n          pokemonsCopy: action.payload,\n        };\n  \n      case FILTER_BY_ORIGIN:\n        const createdFilter =\n          action.payload === \"created\"\n            ? state.allPokemons.filter((event) => event.createdInDb)\n            : state.allPokemons.filter((event) => !event.createdInDb);\n        return {\n          ...state,\n          allPokemons: createdFilter,\n        };\n  \n      case FILTER_BY_TYPE:\n        let filterType;\n        if (action.payload === \"All\") {\n          filterType = state.allPokemons;\n        } else {\n          filterType = state.allPokemons.filter((event) =>\n            event.types.includes(action.payload)\n          );\n        }\n        return {\n          ...state,\n          allPokemons: filterType,\n        };\n  \n      case FILTER_BY_ATTACK:\n        let copy = state.allPokemons;\n        if (action.payload === \"descending\") {\n          return {\n            ...state,\n            allPokemons: copy.sort((a, b) => b.attack - a.attack),\n          };\n        } else {\n          return {\n            ...state,\n            allPokemons: copy.sort((a, b) => a.attack - b.attack),\n          };\n        }\n  \n      case ORDER_BY_NAME:\n        const sortedPokemons = state.allPokemons.sort((a, b) => {\n          if (action.payload === \"AA\") {\n            return a.name.localeCompare(b.name);\n          } else if (action.payload === \"ZA\") {\n            return b.name.localeCompare(a.name);\n          }\n          return 0;\n        });\n  \n        return {\n          ...state,\n          allPokemons: sortedPokemons,\n        };\n  \n      default:\n        return { ...state };\n    }\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}