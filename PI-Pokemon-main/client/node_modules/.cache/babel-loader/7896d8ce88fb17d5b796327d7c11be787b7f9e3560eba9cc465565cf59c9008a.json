{"ast":null,"code":"// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS, SELECT_ATTACK, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedOrder: \"\",\n//     selectedAttack: \"\",\n//     selectedOrigin: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n\n//       case SELECT_ORDER:\n//         return {\n//           ...state,\n//           selectedOrder: action.payload,\n//         };\n\n//       case SELECT_ORIGIN:\n//         return {\n//           ...state,\n//           selectedOrigin: action.payload,\n//         };\n\n//       case SELECT_ATTACK:\n//         return {\n//           ...state,\n//           selectedAttack: action.payload,\n//         };\n\n//       case SELECT_TYPE:\n//           return {\n//           ...state,\n//           selectedType: action.payload,\n//         };\n\n//     default:\n//       return { ...state };\n//   }\n// };\n\n// export default rootReducer\n\nimport { GET_POKEMONS, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS, SELECT_ATTACK, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: [],\n  filters: {\n    type: \"\",\n    order: \"\",\n    attack: \"\",\n    origin: \"\"\n  }\n};\nconst applyFilters = (pokemons, filters) => {\n  let filteredPokemons = [...pokemons];\n  if (filters.type !== \"All\") {\n    filteredPokemons = filteredPokemons.filter(pokemon => pokemon.types.includes(filters.type));\n  }\n  if (filters.origin === \"created\") {\n    filteredPokemons = filteredPokemons.filter(pokemon => pokemon.createdInDb);\n  } else if (filters.origin === \"api\") {\n    filteredPokemons = filteredPokemons.filter(pokemon => !pokemon.createdInDb);\n  }\n  if (filters.order === \"descending\") {\n    filteredPokemons.sort((a, b) => b.attack - a.attack);\n  } else {\n    filteredPokemons.sort((a, b) => a.attack - b.attack);\n  }\n  return filteredPokemons;\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => action.payload === \"AA\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name));\n      return {\n        ...state,\n        pokemonsCopy: sortedPokemons\n      };\n    case FILTER_BY_TYPE:\n    case FILTER_BY_ORIGIN:\n    case FILTER_BY_ATTACK:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.payload.filterType]: action.payload.value\n        }\n      };\n    case RESET_FILTERS:\n      return {\n        ...state,\n        filters: {\n          type: \"\",\n          order: \"\",\n          attack: \"\",\n          origin: \"\"\n        }\n      };\n    case SELECT_ORDER:\n    case SELECT_ORIGIN:\n    case SELECT_ATTACK:\n    case SELECT_TYPE:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.payload.filterType]: action.payload.value\n        }\n      };\n    default:\n      const filteredPokemons = applyFilters(state.allPokemons, state.filters);\n      return {\n        ...state,\n        filteredPokemons\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","RESET_FILTERS","SELECT_ATTACK","SELECT_ORDER","SELECT_ORIGIN","SELECT_TYPE","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","filters","type","order","attack","origin","applyFilters","pokemons","filter","pokemon","types","includes","createdInDb","sort","a","b","rootReducer","state","action","payload","sortedPokemons","slice","name","localeCompare","filterType","value"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["// import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS, SELECT_ATTACK, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE } from \"./actionsTypes\"\n\n// const initialState = {\n//     allPokemons: [],\n//     pokemonsCopy: [],\n//     allTypes: [],\n//     filteredPokemons: [],\n//     selectedType: \"\",\n//     selectedOrder: \"\",\n//     selectedAttack: \"\",\n//     selectedOrigin: \"\",\n// }\n\n// const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case GET_POKEMONS:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n//     case GET_TYPES:\n//       return {\n//         ...state,\n//         allTypes: action.payload,\n//       };\n//     case GET_POKEMON_NAME:\n//       return {\n//         ...state,\n//         allPokemons: action.payload,\n//         pokemonsCopy: action.payload,\n//       };\n\n//     case ORDER_BY_NAME:\n//       const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//         if (action.payload === \"AA\") {\n//           return a.name.localeCompare(b.name);\n//         } else if (action.payload === \"ZA\") {\n//           return b.name.localeCompare(a.name);\n//         }\n//         return 0;\n//       });\n\n//       return {\n//         ...state,\n//         allPokemons: sortedPokemons,\n//       };\n\n//     case FILTER_BY_TYPE:\n//       let filterType;\n//       if (action.payload === \"All\") {\n//         filterType = state.pokemonsCopy;\n//       } else {\n//         filterType = state.pokemonsCopy.filter((event) =>\n//           event.types.includes(action.payload)\n//         );\n//       }\n//       return {\n//         ...state,\n//         allPokemons: filterType,\n//       };\n\n//     case FILTER_BY_ORIGIN:\n//       const createdFilter =\n//         action.payload === \"created\"\n//           ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//           : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//       return {\n//         ...state,\n//         allPokemons:\n//           action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//       };\n\n//     // let breedsFromApiOrDbOrAll = [];\n//     // // Si la acción es 'all', selecciona todas las razas\n//     // if (action.payload === \"All\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons;\n//     //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n//     // } else if (action.payload === \"created\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => e.id.length > 5\n//     //   );\n//     //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n//     // } else if (action.payload === \"api\") {\n//     //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n//     //     (e) => typeof e.id === \"number\"\n//     //   );\n//     // }\n//     // return {\n//     //   ...state,\n//     //   allPokemons: breedsFromApiOrDbOrAll,\n//     // };\n//     case FILTER_BY_ATTACK:\n//       let copy = state.allPokemons;\n//       if (action.payload === \"descending\") {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => b.attack - a.attack)\n//             .map((poke) => poke),\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           allPokemons: copy\n//             .sort((a, b) => a.attack - b.attack)\n//             .map((poke) => poke),\n//         };\n//       }\n//     case RESET_FILTERS:\n//       return {\n//         ...state,\n//         selectedFilteredByOrder: \"\",\n//         selectedFilteredAttack: \"\",\n//         selectedType: \"\",\n//       };\n\n//       case SELECT_ORDER:\n//         return {\n//           ...state,\n//           selectedOrder: action.payload,\n//         };\n  \n//       case SELECT_ORIGIN:\n//         return {\n//           ...state,\n//           selectedOrigin: action.payload,\n//         };\n  \n//       case SELECT_ATTACK:\n//         return {\n//           ...state,\n//           selectedAttack: action.payload,\n//         };\n\n//       case SELECT_TYPE:\n//           return {\n//           ...state,\n//           selectedType: action.payload,\n//         };\n  \n\n//     default:\n//       return { ...state };\n//   }\n// };\n                \n// export default rootReducer\n\nimport {\n    GET_POKEMONS,\n    GET_TYPES,\n    ORDER_BY_NAME,\n    FILTER_BY_ORIGIN,\n    FILTER_BY_TYPE,\n    FILTER_BY_ATTACK,\n    RESET_FILTERS,\n    SELECT_ATTACK,\n    SELECT_ORDER,\n    SELECT_ORIGIN,\n    SELECT_TYPE\n  } from \"./actionsTypes\";\n  \n  const initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: [],\n    filters: {\n      type: \"\",\n      order: \"\",\n      attack: \"\",\n      origin: \"\"\n    }\n  };\n  \n  const applyFilters = (pokemons, filters) => {\n    let filteredPokemons = [...pokemons];\n  \n    if (filters.type !== \"All\") {\n      filteredPokemons = filteredPokemons.filter((pokemon) =>\n        pokemon.types.includes(filters.type)\n      );\n    }\n  \n    if (filters.origin === \"created\") {\n      filteredPokemons = filteredPokemons.filter((pokemon) => pokemon.createdInDb);\n    } else if (filters.origin === \"api\") {\n      filteredPokemons = filteredPokemons.filter(\n        (pokemon) => !pokemon.createdInDb\n      );\n    }\n  \n    if (filters.order === \"descending\") {\n      filteredPokemons.sort((a, b) => b.attack - a.attack);\n    } else {\n      filteredPokemons.sort((a, b) => a.attack - b.attack);\n    }\n  \n    return filteredPokemons;\n  };\n  \n  const rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case GET_POKEMONS:\n        return {\n          ...state,\n          allPokemons: action.payload,\n          pokemonsCopy: action.payload\n        };\n      case GET_TYPES:\n        return {\n          ...state,\n          allTypes: action.payload\n        };\n      case ORDER_BY_NAME:\n        const sortedPokemons = state.pokemonsCopy\n          .slice()\n          .sort((a, b) => (action.payload === \"AA\" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)));\n  \n        return {\n          ...state,\n          pokemonsCopy: sortedPokemons\n        };\n      case FILTER_BY_TYPE:\n      case FILTER_BY_ORIGIN:\n      case FILTER_BY_ATTACK:\n        return {\n          ...state,\n          filters: {\n            ...state.filters,\n            [action.payload.filterType]: action.payload.value\n          }\n        };\n      case RESET_FILTERS:\n        return {\n          ...state,\n          filters: {\n            type: \"\",\n            order: \"\",\n            attack: \"\",\n            origin: \"\"\n          }\n        };\n      case SELECT_ORDER:\n      case SELECT_ORIGIN:\n      case SELECT_ATTACK:\n      case SELECT_TYPE:\n        return {\n          ...state,\n          filters: {\n            ...state.filters,\n            [action.payload.filterType]: action.payload.value\n          }\n        };\n      default:\n        const filteredPokemons = applyFilters(\n          state.allPokemons,\n          state.filters\n        );\n        return {\n          ...state,\n          filteredPokemons\n        };\n    }\n  };\n  \n  export default rootReducer;\n  "],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}