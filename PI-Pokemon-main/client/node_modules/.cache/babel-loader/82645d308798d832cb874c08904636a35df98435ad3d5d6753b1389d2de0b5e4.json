{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: []\n};\n\n// const rootReducer = (state = initialState, action) => {\n//     switch(action.type){\n//         case GET_POKEMONS:\n//             return {\n//                 // devolvemos la copia para no pisar el estado\n//                 ...state,\n//                 allPokemons: action.payload,\n//                 pokemonsCopy: action.payload\n//             }\n//             case GET_TYPES:\n//                 return {\n//                     ...state,\n//                     allTypes: action.payload\n//             }\n//             case GET_POKEMON_NAME:\n//                 return {\n//                     // devolvemos la copia para no pisar el estado\n//                     ...state,\n//                     allPokemons: action.payload,\n//                     pokemonsCopy: action.payload\n//                 }\n\n//             case ORDER_BY_NAME:\n//                 const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//                     if (action.payload === 'AA') {\n//                     return a.name.localeCompare(b.name);\n//                     } else if (action.payload === 'ZA') {\n//                     return b.name.localeCompare(a.name);\n//                     }\n//                     return 0;\n//                 });\n\n//                 return {\n//                     ...state,\n//                     allPokemons: sortedPokemons,\n//                 };\n\n//             case FILTER_BY_TYPE:\n//                 let filterType;\n//                 if (action.payload === \"All\") {\n//                     filterType = state.pokemonsCopy;\n//                 } else {\n//                     filterType = state.pokemonsCopy.filter((event) =>\n//                     event.types.includes(action.payload)\n//                     );\n//                 }\n//             return {\n//                 ...state,\n//                 allPokemons: filterType,\n//             }; \n\n//             case FILTER_BY_ORIGIN:\n//                     const createdFilter = action.payload === \"created\"\n//                     ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//                     : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//             return {\n//                 ...state,\n//                 allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//             }\n//             case FILTER_BY_ATTACK:\n//                 let copy = state.allPokemons;\n//                 if (action.payload === 'descending') {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n//                     }\n//                 } else {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n//                     }\n//                 }\n//                 default:\n//                     return {...state}\n//             }\n//     }\n\n// export default rootReducer\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.allPokemons.filter(event => event.createdInDb) : state.allPokemons.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: createdFilter\n      };\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.allPokemons;\n      } else {\n        filterType = state.allPokemons.filter(event => event.types.includes(action.payload));\n      }\n      return {\n        ...state,\n        allPokemons: filterType\n      };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack)\n        };\n      }\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.allPokemons.sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","initialState","allPokemons","pokemonsCopy","allTypes","rootReducer","state","action","type","payload","createdFilter","filter","event","createdInDb","filterType","types","includes","copy","sort","a","b","attack","sortedPokemons","name","localeCompare"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: []\n}\n\n// const rootReducer = (state = initialState, action) => {\n//     switch(action.type){\n//         case GET_POKEMONS:\n//             return {\n//                 // devolvemos la copia para no pisar el estado\n//                 ...state,\n//                 allPokemons: action.payload,\n//                 pokemonsCopy: action.payload\n//             }\n//             case GET_TYPES:\n//                 return {\n//                     ...state,\n//                     allTypes: action.payload\n//             }\n//             case GET_POKEMON_NAME:\n//                 return {\n//                     // devolvemos la copia para no pisar el estado\n//                     ...state,\n//                     allPokemons: action.payload,\n//                     pokemonsCopy: action.payload\n//                 }\n                    \n//             case ORDER_BY_NAME:\n//                 const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n//                     if (action.payload === 'AA') {\n//                     return a.name.localeCompare(b.name);\n//                     } else if (action.payload === 'ZA') {\n//                     return b.name.localeCompare(a.name);\n//                     }\n//                     return 0;\n//                 });\n                  \n//                 return {\n//                     ...state,\n//                     allPokemons: sortedPokemons,\n//                 };\n                    \n//             case FILTER_BY_TYPE:\n//                 let filterType;\n//                 if (action.payload === \"All\") {\n//                     filterType = state.pokemonsCopy;\n//                 } else {\n//                     filterType = state.pokemonsCopy.filter((event) =>\n//                     event.types.includes(action.payload)\n//                     );\n//                 }\n//             return {\n//                 ...state,\n//                 allPokemons: filterType,\n//             }; \n\n//             case FILTER_BY_ORIGIN:\n//                     const createdFilter = action.payload === \"created\"\n//                     ? state.pokemonsCopy.filter((event) => event.createdInDb)\n//                     : state.pokemonsCopy.filter((event) => !event.createdInDb);\n//             return {\n//                 ...state,\n//                 allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n//             }\n//             case FILTER_BY_ATTACK:\n//                 let copy = state.allPokemons;\n//                 if (action.payload === 'descending') {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n//                     }\n//                 } else {\n//                     return {\n//                         ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n//                     }\n//                 }\n//                 default:\n//                     return {...state}\n//             }\n//     }\n                \n// export default rootReducer\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case GET_POKEMONS:\n        return {\n          ...state,\n          allPokemons: action.payload,\n          pokemonsCopy: action.payload,\n        };\n      case GET_TYPES:\n        return {\n          ...state,\n          allTypes: action.payload,\n        };\n      case GET_POKEMON_NAME:\n        return {\n          ...state,\n          allPokemons: action.payload,\n          pokemonsCopy: action.payload,\n        };\n  \n      case FILTER_BY_ORIGIN:\n        const createdFilter =\n          action.payload === \"created\"\n            ? state.allPokemons.filter((event) => event.createdInDb)\n            : state.allPokemons.filter((event) => !event.createdInDb);\n        return {\n          ...state,\n          allPokemons: createdFilter,\n        };\n  \n      case FILTER_BY_TYPE:\n        let filterType;\n        if (action.payload === \"All\") {\n          filterType = state.allPokemons;\n        } else {\n          filterType = state.allPokemons.filter((event) =>\n            event.types.includes(action.payload)\n          );\n        }\n        return {\n          ...state,\n          allPokemons: filterType,\n        };\n  \n      case FILTER_BY_ATTACK:\n        let copy = state.allPokemons;\n        if (action.payload === \"descending\") {\n          return {\n            ...state,\n            allPokemons: copy.sort((a, b) => b.attack - a.attack),\n          };\n        } else {\n          return {\n            ...state,\n            allPokemons: copy.sort((a, b) => a.attack - b.attack),\n          };\n        }\n  \n      case ORDER_BY_NAME:\n        const sortedPokemons = state.allPokemons.sort((a, b) => {\n          if (action.payload === \"AA\") {\n            return a.name.localeCompare(b.name);\n          } else if (action.payload === \"ZA\") {\n            return b.name.localeCompare(a.name);\n          }\n          return 0;\n        });\n  \n        return {\n          ...state,\n          allPokemons: sortedPokemons,\n        };\n  \n      default:\n        return { ...state };\n    }\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}