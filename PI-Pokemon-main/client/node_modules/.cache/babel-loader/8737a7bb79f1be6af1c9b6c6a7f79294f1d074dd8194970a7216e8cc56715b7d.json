{"ast":null,"code":"// import NavBar from '../../Components/NavBar/NavBar';\n// import React, {useEffect, useState } from 'react';\n// import './HomePage.css';\n// // import getColorForType from '../../utils/colors'\n// import { useDispatch, useSelector } from 'react-redux';\n// import { filterByOrigin, filterByType, getPokemon, getPokemonByName, getTypes, orderByName } from '../../Redux/actions';\n// import Cards from '../../Components/Cards/Cards';\n// // import Footer from '../Footer/Footer';\n\n// const HomePage = () => {\n//   const dispatch = useDispatch()\n//   // const pokemons = useSelector((state) => state.pokemonsCopy); // Obtén la lista de Pokémon ordenada\n//   // global state = component subscribed to global state\n//   const allPokemons = useSelector(state => state.allPokemons)\n//   const allTypes = useSelector(state => state.allTypes)\n\n//   const [searchPokemon, setSearchPokemon] = useState(\"\")\n//   // const [searchId, setSearchId] = useState(\"\");\n//   // const [selectedOrigin, setSelectedOrigin] = useState(\"all\");\n\n//   function handleChange(event) {\n//     event.preventDefault()\n//     setSearchPokemon(event.target.value)\n//   }\n//   function handleSubmit(event){\n//     event.preventDefault()\n//     dispatch(getPokemonByName(searchPokemon))\n//   }\n\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pokemonsPerPage] = useState(12);\n\n//   useEffect(() => {\n//     // when page render will send the action and modify the state\n//     dispatch(getTypes());\n//     dispatch(getPokemon())\n//   },[dispatch])\n\n//   // Función para manejar el cambio de orden\n//   const handleOrderChange = (event) => {\n//     const order = event.target.value; // 'AA' para ascendente, 'ZA' para descendente\n//     dispatch(orderByName(order)); // Llama a la acción para ordenar los Pokémons\n//   };\n\n//   // filtrado por origen \n\n//   const handleOrigin = (event)=>{\n//     const {value} = event.target;\n//     dispatch(filterByOrigin(value))\n// }\n\n// // Paginado\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber);\n//   };\n\n//   const indexOfLastPokemon = currentPage * pokemonsPerPage;\n//   const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPaerPage;\n//   const currentPokemons = allPokemons.slice(indexOfFirstPokemon, indexOfLastPokemon);\n\n//   useEffect(()=>{\n//     if(currentPokemons.length === 0) setCurrentPage(1);\n//   },[currentPokemons])\n\n//   const nextHandler = () => {\n//     if (indexOfFirstPokemon >= allPokemons.length) return; // Validación para detenerse\n//     setCurrentPage(currentPage + 1);\n//   }\n\n//   const prevHandler = () => {\n//     if (currentPage === 0) return;\n//     setCurrentPage(currentPage - 1);\n//   }\n\n//   // Filter by TYPE\n//   const [selectedType, setSelectedType] = useState(\"\"); // Estado para almacenar el tipo seleccionado\n\n//   const handleTypeChange = (event) => {\n//     const type = event.target.value;\n//     setSelectedType(type); // Actualiza el tipo seleccionado en el estado local\n//     dispatch(filterByType(type)); // Llama a la acción para filtrar los Pokémon por tipo\n//   };\n\n//   return (\n//     <div className='home_general'>\n//       <div>\n//       <NavBar handleChange={handleChange} handleSubmit={handleSubmit}/>\n//       </div>\n\n//       <div className='filters'>\n//       <div className='filter_az'>\n//       <select onChange={handleOrderChange}>\n//         <option value=\"AA\">Ascendente (A-Z)</option>\n//         <option value=\"ZA\">Descendente (Z-A)</option>\n//       </select>\n//     </div>\n//     <div className='filter_types'>\n//       <select onChange={handleTypeChange} value={selectedType}>\n//         <option value=\"\">Todos</option>\n//         {allTypes?.map(tipo => <option key={tipo} value={tipo}>{tipo}</option>)}   \n//       </select>\n//     </div>\n//     <div className='filter_types'>\n//     <select name=\"origen\" onChange={handleOrigin}>\n//                 <option value=\"ALL\">-Pokemones-</option>\n//                 <option value=\"DB\">Mis pokemones</option>\n//                 <option value=\"API\">Pokemones de la App</option>\n//                 <option value=\"ALL\">Todos los pokemones</option>\n//             </select>\n//     </div>\n//       </div>\n\n//     <div className='home_cards'> \n//         <Cards allPokemons={currentPokemons} />\n//     </div>\n//     <div className='pagination-container'>\n//       <button className=\"\" onClick={prevHandler}>Prev</button>\n//       <button className=\"\" >{currentPage}</button>\n//       <button className=\"\" onClick={nextHandler}>Next</button>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default HomePage;","map":{"version":3,"names":[],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/views/HomePage/homePage.jsx"],"sourcesContent":["// import NavBar from '../../Components/NavBar/NavBar';\n// import React, {useEffect, useState } from 'react';\n// import './HomePage.css';\n// // import getColorForType from '../../utils/colors'\n// import { useDispatch, useSelector } from 'react-redux';\n// import { filterByOrigin, filterByType, getPokemon, getPokemonByName, getTypes, orderByName } from '../../Redux/actions';\n// import Cards from '../../Components/Cards/Cards';\n// // import Footer from '../Footer/Footer';\n\n// const HomePage = () => {\n//   const dispatch = useDispatch()\n//   // const pokemons = useSelector((state) => state.pokemonsCopy); // Obtén la lista de Pokémon ordenada\n//   // global state = component subscribed to global state\n//   const allPokemons = useSelector(state => state.allPokemons)\n//   const allTypes = useSelector(state => state.allTypes)\n\n//   const [searchPokemon, setSearchPokemon] = useState(\"\")\n//   // const [searchId, setSearchId] = useState(\"\");\n//   // const [selectedOrigin, setSelectedOrigin] = useState(\"all\");\n\n\n//   function handleChange(event) {\n//     event.preventDefault()\n//     setSearchPokemon(event.target.value)\n//   }\n//   function handleSubmit(event){\n//     event.preventDefault()\n//     dispatch(getPokemonByName(searchPokemon))\n//   }\n\n  \n\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pokemonsPerPage] = useState(12);\n\n\n//   useEffect(() => {\n//     // when page render will send the action and modify the state\n//     dispatch(getTypes());\n//     dispatch(getPokemon())\n//   },[dispatch])\n\n\n\n//   // Función para manejar el cambio de orden\n//   const handleOrderChange = (event) => {\n//     const order = event.target.value; // 'AA' para ascendente, 'ZA' para descendente\n//     dispatch(orderByName(order)); // Llama a la acción para ordenar los Pokémons\n//   };\n\n\n//   // filtrado por origen \n\n//   const handleOrigin = (event)=>{\n//     const {value} = event.target;\n//     dispatch(filterByOrigin(value))\n// }\n\n// // Paginado\n//   const paginate = (pageNumber) => {\n//     setCurrentPage(pageNumber);\n//   };\n\n//   const indexOfLastPokemon = currentPage * pokemonsPerPage;\n//   const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPaerPage;\n//   const currentPokemons = allPokemons.slice(indexOfFirstPokemon, indexOfLastPokemon);\n\n//   useEffect(()=>{\n//     if(currentPokemons.length === 0) setCurrentPage(1);\n//   },[currentPokemons])\n\n\n//   const nextHandler = () => {\n//     if (indexOfFirstPokemon >= allPokemons.length) return; // Validación para detenerse\n//     setCurrentPage(currentPage + 1);\n//   }\n\n//   const prevHandler = () => {\n//     if (currentPage === 0) return;\n//     setCurrentPage(currentPage - 1);\n//   }\n\n//   // Filter by TYPE\n//   const [selectedType, setSelectedType] = useState(\"\"); // Estado para almacenar el tipo seleccionado\n\n//   const handleTypeChange = (event) => {\n//     const type = event.target.value;\n//     setSelectedType(type); // Actualiza el tipo seleccionado en el estado local\n//     dispatch(filterByType(type)); // Llama a la acción para filtrar los Pokémon por tipo\n//   };\n\n\n//   return (\n//     <div className='home_general'>\n//       <div>\n//       <NavBar handleChange={handleChange} handleSubmit={handleSubmit}/>\n//       </div>\n\n//       <div className='filters'>\n//       <div className='filter_az'>\n//       <select onChange={handleOrderChange}>\n//         <option value=\"AA\">Ascendente (A-Z)</option>\n//         <option value=\"ZA\">Descendente (Z-A)</option>\n//       </select>\n//     </div>\n//     <div className='filter_types'>\n//       <select onChange={handleTypeChange} value={selectedType}>\n//         <option value=\"\">Todos</option>\n//         {allTypes?.map(tipo => <option key={tipo} value={tipo}>{tipo}</option>)}   \n//       </select>\n//     </div>\n//     <div className='filter_types'>\n//     <select name=\"origen\" onChange={handleOrigin}>\n//                 <option value=\"ALL\">-Pokemones-</option>\n//                 <option value=\"DB\">Mis pokemones</option>\n//                 <option value=\"API\">Pokemones de la App</option>\n//                 <option value=\"ALL\">Todos los pokemones</option>\n//             </select>\n//     </div>\n//       </div>\n\n//     <div className='home_cards'> \n//         <Cards allPokemons={currentPokemons} />\n//     </div>\n//     <div className='pagination-container'>\n//       <button className=\"\" onClick={prevHandler}>Prev</button>\n//       <button className=\"\" >{currentPage}</button>\n//       <button className=\"\" onClick={nextHandler}>Next</button>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default HomePage;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}