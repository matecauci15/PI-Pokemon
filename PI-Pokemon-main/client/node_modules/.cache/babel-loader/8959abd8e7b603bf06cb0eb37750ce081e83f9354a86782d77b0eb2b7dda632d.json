{"ast":null,"code":"const validateName = name => {\n  if (name === '') return 'Complete name';\n  if (name.length > 30) return 'Name con not be more than 30 characters';\n  if (!/^[a-zA-Z\\s]+$/.test(name)) return 'Name can not contain special characters';\n  return '';\n};\nconst validateImage = image => {\n  const urlRegex = /^(https?:\\/\\/)?([a-zA-Z0-9.-]+)(\\.[a-zA-Z]{2,})(:\\d{1,5})?(\\/\\S*)?$/;\n  if (image === '') return 'Complete with an URL';\n  if (!urlRegex.test(image)) return 'Invalid URL';\n  return '';\n};\nconst validateNumber = (value, fieldName) => {\n  if (value === '') return `Complete with a number for ${fieldName}`;\n  if (isNaN(parseInt(value))) return `${fieldName} must be a number`;\n  if (value < 1) return `${fieldName} must be greater than 0`;\n  // if (!/^[0-9]{1,3}$/.test(value)) return `${fieldName} must be between 0-999`;\n  if (!/^(?:[1-9][0-9]{0,2}|[1-9])$/.test(value)) return `${fieldName} must be between 1-999`;\n  return '';\n};\nconst validateTypes = types => {\n  if (types.length === 0) return 'Select max 2 types';\n  if (types.length > 2) return 'Can not select more than 2 types';\n  return '';\n};\nmodule.exports = {\n  validateName,\n  validateImage,\n  validateNumber,\n  validateTypes\n};\n\n// const validation = (state, name) => {\n//     if(name === \"name\"){\n//         if(state.name === '') setErrors({...errors, name:\"Complete name\"})\n//         else if (!/^[a-zA-Z\\s]+$/.test(state.name)) setErrors({ ...errors, name: \"Name can not contain special characters\" })\n//         else setErrors({...errors, name: ''})\n//     }\n//     if(name === \"image\"){\n//         const urlRegex = /^(https?:\\/\\/)?([a-zA-Z0-9.-]+)(\\.[a-zA-Z]{2,})(:\\d{1,5})?(\\/\\S*)?$/;\n//         if (state.image === '') {\n//           return setErrors({ ...errors, image: 'Complete with an URL' });\n//         }\n//         if(!urlRegex.test(state.image)){\n//           return setErrors({...errors, image: 'URL inválida'})\n//         } else {\n//           return setErrors({ ...errors, image: '' });\n//         };\n//     }\n//     if(name === \"hp\"){\n//         if(state.hp === '') setErrors({...errors, hp:'Complete with a number'})\n//         else if(isNaN(parseInt(state.hp))) setErrors({...errors, hp: \"hp must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.hp)) setErrors({...errors, hp: \"Hp must be between 0-999\"})\n//         else setErrors({...errors, hp: ''})\n//     }\n//     if(name === \"attack\"){\n//         if(state.attack === '') setErrors({...errors, attack:'Complete with a number'})\n//         else if(isNaN(parseInt(state.attack))) setErrors({...errors, attack: \"Attack must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.attack)) setErrors({...errors, attack: \"Attack must be between 0-999\"})\n//         else setErrors({...errors, attack: ''})\n//     }\n//     if(name === \"defense\"){\n//         if(state.defense === '') setErrors({...errors, defense:'Complete with a number'})\n//         else if(isNaN(parseInt(state.defense))) setErrors({...errors, defense: \"Defense must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.defense)) setErrors({...errors, defense: \"Defense must be between 0-999\"})\n//         else setErrors({...errors, defense: ''})\n//     }\n//     if(name === \"speed\"){\n//         if(state.speed === '') setErrors({...errors, speed:'Complete with a number'})\n//         else if(isNaN(parseInt(state.speed))) setErrors({...errors, speed: \"Speed must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.speed)) setErrors({...errors, speed: \"Speed must be between 0-999\"})\n//         else setErrors({...errors, speed: ''})\n//     }\n//     if(name === \"height\"){\n//         if(state.height === '') setErrors({...errors, height:'Complete with a number'})\n//         else if(isNaN(parseInt(state.height))) setErrors({...errors, height: \"Height must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.height)) setErrors({...errors, height: \"Height must be between 0-999\"})\n//         else setErrors({...errors, height : ''})\n//     }\n//     if(name === \"weight\"){\n//         if(state.weight === '') setErrors({...errors, weight:'Complete with a number'})\n//         else if(isNaN(parseInt(state.weight))) setErrors({...errors, weight: \"Weight must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.weight)) setErrors({...errors, weight: \"Weight must be between 0-999\"})\n//         else setErrors({...errors, weight : ''})\n//     }\n// //     if(name === \"types\"){\n// //         if(state.types === '') setErrors({...errors, types:'Select 1 or 2 types'})\n// //         else if(state.types.length > 1) setErrors({...errors, types: \"Can not select more than 2 types\"})\n// //         else setErrors({...errors, types: ''})\n// // }\n// }","map":{"version":3,"names":["validateName","name","length","test","validateImage","image","urlRegex","validateNumber","value","fieldName","isNaN","parseInt","validateTypes","types","module","exports"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/utils/validation.js"],"sourcesContent":["const validateName = (name) => {\n    if (name === '') return 'Complete name';\n    if (name.length > 30) return 'Name con not be more than 30 characters'\n    if (!/^[a-zA-Z\\s]+$/.test(name)) return 'Name can not contain special characters';\n    return '';\n  };\n  \n  const validateImage = (image) => {\n    const urlRegex = /^(https?:\\/\\/)?([a-zA-Z0-9.-]+)(\\.[a-zA-Z]{2,})(:\\d{1,5})?(\\/\\S*)?$/;\n    if (image === '') return 'Complete with an URL';\n    if (!urlRegex.test(image)) return 'Invalid URL';\n    return '';\n  };\n  \n  const validateNumber = (value, fieldName) => {\n    if (value === '') return `Complete with a number for ${fieldName}`;\n    if (isNaN(parseInt(value))) return `${fieldName} must be a number`;\n    if (value < 1) return `${fieldName} must be greater than 0`;\n    // if (!/^[0-9]{1,3}$/.test(value)) return `${fieldName} must be between 0-999`;\n    if (!/^(?:[1-9][0-9]{0,2}|[1-9])$/.test(value)) return `${fieldName} must be between 1-999`;\n    return '';\n  };\n  \n  const validateTypes = (types) => {\n    if (types.length === 0) return 'Select max 2 types';\n    if (types.length > 2) return 'Can not select more than 2 types';\n    return '';\n  };\n  \n  module.exports = {\n    validateName,\n    validateImage,\n    validateNumber,\n    validateTypes,\n  };\n\n\n\n\n  \n// const validation = (state, name) => {\n//     if(name === \"name\"){\n//         if(state.name === '') setErrors({...errors, name:\"Complete name\"})\n//         else if (!/^[a-zA-Z\\s]+$/.test(state.name)) setErrors({ ...errors, name: \"Name can not contain special characters\" })\n//         else setErrors({...errors, name: ''})\n//     }\n//     if(name === \"image\"){\n//         const urlRegex = /^(https?:\\/\\/)?([a-zA-Z0-9.-]+)(\\.[a-zA-Z]{2,})(:\\d{1,5})?(\\/\\S*)?$/;\n//         if (state.image === '') {\n//           return setErrors({ ...errors, image: 'Complete with an URL' });\n//         }\n//         if(!urlRegex.test(state.image)){\n//           return setErrors({...errors, image: 'URL inválida'})\n//         } else {\n//           return setErrors({ ...errors, image: '' });\n//         };\n//     }\n//     if(name === \"hp\"){\n//         if(state.hp === '') setErrors({...errors, hp:'Complete with a number'})\n//         else if(isNaN(parseInt(state.hp))) setErrors({...errors, hp: \"hp must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.hp)) setErrors({...errors, hp: \"Hp must be between 0-999\"})\n//         else setErrors({...errors, hp: ''})\n//     }\n//     if(name === \"attack\"){\n//         if(state.attack === '') setErrors({...errors, attack:'Complete with a number'})\n//         else if(isNaN(parseInt(state.attack))) setErrors({...errors, attack: \"Attack must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.attack)) setErrors({...errors, attack: \"Attack must be between 0-999\"})\n//         else setErrors({...errors, attack: ''})\n//     }\n//     if(name === \"defense\"){\n//         if(state.defense === '') setErrors({...errors, defense:'Complete with a number'})\n//         else if(isNaN(parseInt(state.defense))) setErrors({...errors, defense: \"Defense must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.defense)) setErrors({...errors, defense: \"Defense must be between 0-999\"})\n//         else setErrors({...errors, defense: ''})\n//     }\n//     if(name === \"speed\"){\n//         if(state.speed === '') setErrors({...errors, speed:'Complete with a number'})\n//         else if(isNaN(parseInt(state.speed))) setErrors({...errors, speed: \"Speed must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.speed)) setErrors({...errors, speed: \"Speed must be between 0-999\"})\n//         else setErrors({...errors, speed: ''})\n//     }\n//     if(name === \"height\"){\n//         if(state.height === '') setErrors({...errors, height:'Complete with a number'})\n//         else if(isNaN(parseInt(state.height))) setErrors({...errors, height: \"Height must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.height)) setErrors({...errors, height: \"Height must be between 0-999\"})\n//         else setErrors({...errors, height : ''})\n//     }\n//     if(name === \"weight\"){\n//         if(state.weight === '') setErrors({...errors, weight:'Complete with a number'})\n//         else if(isNaN(parseInt(state.weight))) setErrors({...errors, weight: \"Weight must be a number\"})\n//         else if(!/^[0-9]{1,3}$/.test(state.weight)) setErrors({...errors, weight: \"Weight must be between 0-999\"})\n//         else setErrors({...errors, weight : ''})\n//     }\n// //     if(name === \"types\"){\n// //         if(state.types === '') setErrors({...errors, types:'Select 1 or 2 types'})\n// //         else if(state.types.length > 1) setErrors({...errors, types: \"Can not select more than 2 types\"})\n// //         else setErrors({...errors, types: ''})\n// // }\n// }\n"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAC3B,IAAIA,IAAI,KAAK,EAAE,EAAE,OAAO,eAAe;EACvC,IAAIA,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE,OAAO,yCAAyC;EACtE,IAAI,CAAC,eAAe,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE,OAAO,yCAAyC;EACjF,OAAO,EAAE;AACX,CAAC;AAED,MAAMG,aAAa,GAAIC,KAAK,IAAK;EAC/B,MAAMC,QAAQ,GAAG,qEAAqE;EACtF,IAAID,KAAK,KAAK,EAAE,EAAE,OAAO,sBAAsB;EAC/C,IAAI,CAACC,QAAQ,CAACH,IAAI,CAACE,KAAK,CAAC,EAAE,OAAO,aAAa;EAC/C,OAAO,EAAE;AACX,CAAC;AAED,MAAME,cAAc,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EAC3C,IAAID,KAAK,KAAK,EAAE,EAAE,OAAQ,8BAA6BC,SAAU,EAAC;EAClE,IAAIC,KAAK,CAACC,QAAQ,CAACH,KAAK,CAAC,CAAC,EAAE,OAAQ,GAAEC,SAAU,mBAAkB;EAClE,IAAID,KAAK,GAAG,CAAC,EAAE,OAAQ,GAAEC,SAAU,yBAAwB;EAC3D;EACA,IAAI,CAAC,6BAA6B,CAACN,IAAI,CAACK,KAAK,CAAC,EAAE,OAAQ,GAAEC,SAAU,wBAAuB;EAC3F,OAAO,EAAE;AACX,CAAC;AAED,MAAMG,aAAa,GAAIC,KAAK,IAAK;EAC/B,IAAIA,KAAK,CAACX,MAAM,KAAK,CAAC,EAAE,OAAO,oBAAoB;EACnD,IAAIW,KAAK,CAACX,MAAM,GAAG,CAAC,EAAE,OAAO,kCAAkC;EAC/D,OAAO,EAAE;AACX,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAG;EACff,YAAY;EACZI,aAAa;EACbG,cAAc;EACdK;AACF,CAAC;;AAMH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}