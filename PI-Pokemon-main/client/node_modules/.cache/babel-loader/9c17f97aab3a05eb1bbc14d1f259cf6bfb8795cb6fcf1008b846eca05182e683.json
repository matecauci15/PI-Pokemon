{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS, SELECT_ATTACK, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: [],\n  selectedType: \"\",\n  selectedOrder: \"\",\n  selectedAttack: \"\",\n  selectedOrigin: \"\"\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.pokemonsCopy;\n      } else {\n        filterType = state.pokemonsCopy.filter(event => event.types.includes(action.payload));\n      }\n      return {\n        ...state,\n        allPokemons: filterType\n      };\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.pokemonsCopy.filter(event => event.createdInDb) : state.pokemonsCopy.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter\n      };\n\n    // let breedsFromApiOrDbOrAll = [];\n    // // Si la acción es 'all', selecciona todas las razas\n    // if (action.payload === \"All\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons;\n    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n    // } else if (action.payload === \"created\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => e.id.length > 5\n    //   );\n    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n    // } else if (action.payload === \"api\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => typeof e.id === \"number\"\n    //   );\n    // }\n    // return {\n    //   ...state,\n    //   allPokemons: breedsFromApiOrDbOrAll,\n    // };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n        };\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedFilteredByOrder: \"\",\n        selectedFilteredAttack: \"\",\n        selectedType: \"\"\n      };\n    case SELECT_ORDER:\n      return {\n        ...state,\n        selectedOrder: action.payload\n      };\n    case SELECT_ORIGIN:\n      return {\n        ...state,\n        selectedOrigin: action.payload\n      };\n    case SELECT_ATTACK:\n      return {\n        ...state,\n        selectedAttack: action.payload\n      };\n    case SELECT_TYPE:\n      return {\n        ...state,\n        selectedType: action.payload\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","RESET_FILTERS","SELECT_ATTACK","SELECT_ORDER","SELECT_ORIGIN","SELECT_TYPE","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","selectedType","selectedOrder","selectedAttack","selectedOrigin","rootReducer","state","action","type","payload","sortedPokemons","slice","sort","a","b","name","localeCompare","filterType","filter","event","types","includes","createdFilter","createdInDb","copy","attack","map","poke","selectedFilteredByOrder","selectedFilteredAttack"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS, SELECT_ATTACK, SELECT_ORDER, SELECT_ORIGIN, SELECT_TYPE } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: [],\n    selectedType: \"\",\n    selectedOrder: \"\",\n    selectedAttack: \"\",\n    selectedOrigin: \"\",\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload,\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload,\n      };\n\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === \"AA\") {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === \"ZA\") {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n\n      return {\n        ...state,\n        allPokemons: sortedPokemons,\n      };\n\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.pokemonsCopy;\n      } else {\n        filterType = state.pokemonsCopy.filter((event) =>\n          event.types.includes(action.payload)\n        );\n      }\n      return {\n        ...state,\n        allPokemons: filterType,\n      };\n\n    case FILTER_BY_ORIGIN:\n      const createdFilter =\n        action.payload === \"created\"\n          ? state.pokemonsCopy.filter((event) => event.createdInDb)\n          : state.pokemonsCopy.filter((event) => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons:\n          action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n      };\n\n    // let breedsFromApiOrDbOrAll = [];\n    // // Si la acción es 'all', selecciona todas las razas\n    // if (action.payload === \"All\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons;\n    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n    // } else if (action.payload === \"created\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => e.id.length > 5\n    //   );\n    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n    // } else if (action.payload === \"api\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => typeof e.id === \"number\"\n    //   );\n    // }\n    // return {\n    //   ...state,\n    //   allPokemons: breedsFromApiOrDbOrAll,\n    // };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === \"descending\") {\n        return {\n          ...state,\n          allPokemons: copy\n            .sort((a, b) => b.attack - a.attack)\n            .map((poke) => poke),\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy\n            .sort((a, b) => a.attack - b.attack)\n            .map((poke) => poke),\n        };\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedFilteredByOrder: \"\",\n        selectedFilteredAttack: \"\",\n        selectedType: \"\",\n      };\n\n      case SELECT_ORDER:\n        return {\n          ...state,\n          selectedOrder: action.payload,\n        };\n  \n      case SELECT_ORIGIN:\n        return {\n          ...state,\n          selectedOrigin: action.payload,\n        };\n  \n      case SELECT_ATTACK:\n        return {\n          ...state,\n          selectedAttack: action.payload,\n        };\n\n      case SELECT_TYPE:\n          return {\n          ...state,\n          selectedType: action.payload,\n        };\n  \n\n    default:\n      return { ...state };\n  }\n};\n                \nexport default rootReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}