{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\";\nconst initialState = {\n  allPokemons: [],\n  pokemonsCopy: [],\n  allTypes: [],\n  filteredPokemons: [],\n  selectedType: \"\",\n  selectedFilteredAttack: \"\",\n  selectedFilteredByOrder: \"\"\n};\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        allTypes: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        allPokemons: action.payload,\n        pokemonsCopy: action.payload\n      };\n    case ORDER_BY_NAME:\n      const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n        if (action.payload === 'AA') {\n          return a.name.localeCompare(b.name);\n        } else if (action.payload === 'ZA') {\n          return b.name.localeCompare(a.name);\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        allPokemons: sortedPokemons\n      };\n    case FILTER_BY_TYPE:\n      let filterType;\n      if (action.payload === \"All\") {\n        filterType = state.pokemonsCopy;\n      } else {\n        filterType = state.pokemonsCopy.filter(event => event.types.includes(action.payload));\n      }\n      return {\n        ...state,\n        allPokemons: filterType\n      };\n    case FILTER_BY_ORIGIN:\n      const createdFilter = action.payload === \"created\" ? state.pokemonsCopy.filter(event => event.createdInDb) : state.pokemonsCopy.filter(event => !event.createdInDb);\n      return {\n        ...state,\n        allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter\n      };\n\n    // let breedsFromApiOrDbOrAll = [];\n    // // Si la acción es 'all', selecciona todas las razas\n    // if (action.payload === \"All\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons;\n    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n    // } else if (action.payload === \"created\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => e.id.length > 5\n    //   );\n    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n    // } else if (action.payload === \"api\") {\n    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n    //     (e) => typeof e.id === \"number\"\n    //   );\n    // }\n    // return {\n    //   ...state,\n    //   allPokemons: breedsFromApiOrDbOrAll,\n    // };\n    case FILTER_BY_ATTACK:\n      let copy = state.allPokemons;\n      if (action.payload === 'descending') {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n        };\n      } else {\n        return {\n          ...state,\n          allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n        };\n      }\n    case RESET_FILTERS:\n      return {\n        ...state,\n        selectedFilteredByOrder: \"\",\n        selectedFilteredAttack: \"\",\n        selectedType: \"\"\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON_NAME","GET_TYPES","ORDER_BY_NAME","FILTER_BY_ORIGIN","FILTER_BY_TYPE","FILTER_BY_ATTACK","RESET_FILTERS","initialState","allPokemons","pokemonsCopy","allTypes","filteredPokemons","selectedType","selectedFilteredAttack","selectedFilteredByOrder","rootReducer","state","action","type","payload","sortedPokemons","slice","sort","a","b","name","localeCompare","filterType","filter","event","types","includes","createdFilter","createdInDb","copy","attack","map","poke"],"sources":["/Users/mateocaucino/PI-Pokemon/PI-Pokemon/PI-Pokemon-main/client/src/Redux/reducer.js"],"sourcesContent":["import { GET_POKEMONS, GET_POKEMON_NAME, GET_TYPES, ORDER_BY_NAME, FILTER_BY_ORIGIN, FILTER_BY_TYPE, FILTER_BY_ATTACK, RESET_FILTERS } from \"./actionsTypes\"\n\nconst initialState = {\n    allPokemons: [],\n    pokemonsCopy: [],\n    allTypes: [],\n    filteredPokemons: [],\n    selectedType: \"\",\n    selectedFilteredAttack: \"\",\n    selectedFilteredByOrder: \"\",\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_POKEMONS:\n            return {\n                ...state,\n                allPokemons: action.payload,\n                pokemonsCopy: action.payload\n            }\n            case GET_TYPES:\n                return {\n                    ...state,\n                    allTypes: action.payload\n            }\n            case GET_POKEMON_NAME:\n                return {\n                    ...state,\n                    allPokemons: action.payload,\n                    pokemonsCopy: action.payload\n                }\n                    \n            case ORDER_BY_NAME:\n                const sortedPokemons = state.pokemonsCopy.slice().sort((a, b) => {\n                    if (action.payload === 'AA') {\n                    return a.name.localeCompare(b.name);\n                    } else if (action.payload === 'ZA') {\n                    return b.name.localeCompare(a.name);\n                    }\n                    return 0;\n                });\n                  \n                return {\n                    ...state,\n                    allPokemons: sortedPokemons,\n                };\n                    \n            case FILTER_BY_TYPE:\n                let filterType;\n                if (action.payload === \"All\") {\n                    filterType = state.pokemonsCopy;\n                } else {\n                    filterType = state.pokemonsCopy.filter((event) =>\n                    event.types.includes(action.payload)\n                    );\n                }\n            return {\n                ...state,\n                allPokemons: filterType,\n            }; \n\n            case FILTER_BY_ORIGIN:\n                        const createdFilter = action.payload === \"created\"\n                        ? state.pokemonsCopy.filter((event) => event.createdInDb)\n                        : state.pokemonsCopy.filter((event) => !event.createdInDb);\n                return {\n                        ...state,\n                        allPokemons: action.payload === \"All\" ? state.pokemonsCopy : createdFilter,\n                    }\n\n                    // let breedsFromApiOrDbOrAll = [];\n                    // // Si la acción es 'all', selecciona todas las razas\n                    // if (action.payload === \"All\") {\n                    //   breedsFromApiOrDbOrAll = state.allPokemons;\n                    //   // Si la acción es 'db', selecciona solo las razas con ID de tipo 'string'\n                    // } else if (action.payload === \"created\") {\n                    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n                    //     (e) => e.id.length > 5\n                    //   );\n                    //   // Si la acción es 'api', selecciona solo las razas con ID de tipo 'number'\n                    // } else if (action.payload === \"api\") {\n                    //   breedsFromApiOrDbOrAll = state.allPokemons.filter(\n                    //     (e) => typeof e.id === \"number\"\n                    //   );\n                    // }\n                    // return {\n                    //   ...state,\n                    //   allPokemons: breedsFromApiOrDbOrAll,\n                    // };\n            case FILTER_BY_ATTACK:\n                let copy = state.allPokemons;\n                if (action.payload === 'descending') {\n                    return {\n                        ...state, allPokemons: copy.sort((a, b) => b.attack - a.attack).map(poke => poke)\n                    }\n                } else {\n                    return {\n                        ...state, allPokemons: copy.sort((a, b) => a.attack - b.attack).map(poke => poke)\n                    }\n                }\n                case RESET_FILTERS:\n                    return {\n                      ...state,\n                      selectedFilteredByOrder: \"\",\n                      selectedFilteredAttack: \"\",\n                      selectedType: \"\",\n              };\n                default:\n                    return {...state}\n            }\n    }\n                \nexport default rootReducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}